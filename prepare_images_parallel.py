#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∏ –≤–µ—Ä—Å–∏–∏ –∫–∞–¥—Ä–æ–≤ –∏–∑ NetCDF –≤ –º—É–ª—å—Ç–∏–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ:
  1) RGB —Å —Ü–≤–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π;
  2) Grayscale;
  3) –°—Ö–µ–º—É –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏.
"""

import json
import os
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor
from functools import partial

# matplotlib –¥–æ –∏–º–ø–æ—Ä—Ç–∞ pyplot
import matplotlib
matplotlib.use("Agg")  # headless
import matplotlib.pyplot as plt
from matplotlib import cm

import cartopy.crs as ccrs
import numpy as np
import pandas as pd
import xarray as xr
from PIL import Image
from tqdm import tqdm

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INPUT_DIR = Path("data/src")
COLOR_DIR = Path("data/frames/frames_pil_color")
GRAY_DIR = Path("data/frames/frames_pil_gray")
VIZ_DIR = Path("data/frames/frames_pil_scheme")
MANIFEST_PATH = Path("data/frames/frames_pil_manifest.json")
VARIABLE = "PWV"
STEP_HOURS = 24  # –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤ (–ø—Ä–∏ —à–∞–≥–µ 3‚ÄØ—á)
CMAP_NAME = "jet"  # —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
VMIN, VMAX = 0, 60  # –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (0, 99-—ã–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å)
NUM_WORKERS = 4  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª–Ω—å—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def to_uint8(arr, vmin: float = VMIN, vmax: float = VMAX) -> np.ndarray:
    """–ù–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ -> 0...255 uint8."""
    scaled = np.clip((arr - vmin) / (vmax - vmin), 0, 1)
    return (scaled * 255).astype(np.uint8)


def vis_gray(field: np.ndarray, ts_str: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ –¥–ª—è YOLO."""
    gray_uint8 = to_uint8(field)  # (H, W)
    gray_rgb = np.dstack([gray_uint8] * 3)  # (H, W, 3)
    Image.fromarray(gray_rgb).save(GRAY_DIR / f"{VARIABLE}_{ts_str}.png")


def vis_color(field: np.ndarray, ts_str: str, cmap) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–≤–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É."""
    color_arr = cmap(to_uint8(field) / 255.0)[:, :, :3]  # drop alpha
    color_uint8 = (color_arr * 255).astype(np.uint8)
    Image.fromarray(color_uint8).save(COLOR_DIR / f"{VARIABLE}_{ts_str}.png")


def vis_scheme(var, idx: int, ts_str: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ö–µ–º—É —Å –∏–∑–æ–ª–∏–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏."""
    slice_ = var.isel(timestamp=idx)
    fig = plt.figure(figsize=(14.4, 7.2), dpi=100)
    ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree(central_longitude=-160))
    slice_.T.plot(
        ax=ax,
        transform=ccrs.PlateCarree(central_longitude=20),
        cmap=CMAP_NAME,
        vmin=VMIN,
        vmax=VMAX,
        add_colorbar=False,
    )
    # –ò–∑–æ–ª–∏–Ω–∏–∏
    levels = np.arange(VMIN, VMAX, 10)
    contours = plt.contour(
        slice_.lon,
        slice_.lat,
        slice_.T.squeeze(),
        levels=levels,
        colors="#222222",
        linewidths=0.25,
        transform=ccrs.PlateCarree(central_longitude=20),
    )
    plt.clabel(contours, inline=True, fontsize=8, fmt="%d")
    ax.coastlines(linewidth=0.25)
    ax.gridlines(draw_labels=False, linewidth=0.25, linestyle="--", color="black")
    ax.axis("off")
    ax.set_title("")
    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    plt.savefig(
        VIZ_DIR / f"{VARIABLE}_{ts_str}.png", dpi=100, bbox_inches=None, pad_inches=0
    )
    plt.close(fig)


# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def process_nc(nc_path: Path, step: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω NetCDF‚Äë—Ñ–∞–π–ª."""
    print(f"üöÄ {os.getpid():>5} ‚Üí {nc_path.name}")
    ds = xr.open_dataset(nc_path)
    ds = ds.sortby("lon")
    ds["lon"] = (ds["lon"] - 20) % 360
    ds = ds.sortby("lon")
    var = ds[VARIABLE]
    times = ds["timestamp"].values

    cmap = cm.get_cmap(CMAP_NAME)
    for idx in range(0, len(times), step):
        time_val = pd.to_datetime(str(times[idx]))
        ts_str = time_val.strftime("%Y-%m-%d_%H%M")
        base = f"{VARIABLE}_{ts_str}.png"

        # –≤—ã—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏
        color_path = COLOR_DIR / base
        gray_path = GRAY_DIR / base
        viz_path = VIZ_DIR / base

        # –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä
        if color_path.exists() and gray_path.exists() and viz_path.exists():
            continue

        field = var.isel(timestamp=idx).T.values

        if not gray_path.exists():
            vis_gray(field, ts_str)
        if not color_path.exists():
            vis_color(field, ts_str, cmap)
        if not viz_path.exists():
            vis_scheme(var, idx, ts_str)

    ds.close()  # —è–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ


def main() -> None:
    # –∫–∞—Ç–∞–ª–æ–≥–∏
    for d in (COLOR_DIR, GRAY_DIR, VIZ_DIR):
        d.mkdir(parents=True, exist_ok=True)

    # –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    nc_files = sorted(INPUT_DIR.glob("*.nc"))
    if not nc_files:
        raise FileNotFoundError(f"–í {INPUT_DIR} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ *.nc")

    step = STEP_HOURS // 3  # –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ —à–∞–≥–µ 3‚ÄØ—á

    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    with ProcessPoolExecutor(max_workers=NUM_WORKERS) as pool:
        list(
            tqdm(
                pool.map(partial(process_nc, step=step), nc_files), total=len(nc_files)
            )
        )

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    manifest = [
        {
            "data": {
                "image": f"/data/local-files/?d=data/images/{p.name}",
                "filename": p.name,
            }
        }
        for p in sorted(VIZ_DIR.glob("*.png"))
    ]
    with open(MANIFEST_PATH, "w", encoding="utf-8") as fp:
        json.dump(manifest, fp, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ  –ì–æ—Ç–æ–≤–æ: {len(manifest)} –∫–∞–¥—Ä–æ–≤ (RGB+Gray) –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç {MANIFEST_PATH}")


if __name__ == "__main__":
    main()
